Context-free grammars are a big step towards being able to say what we want in
a parser but, we still need some other things. First of all, a context-free
grammar at least as we define it so far, just gives us a yes or no answer. Yes
something, yes a string is in the language of the Context-free grammar or no it is
not. We also need a method for building a Parse Tree at the input. So in those cases
where it is on the language, we need to know how it's in the language. We need the
actual Parse Tree not just yes or no. In the cases where the string is not in the
language, we have to be able to handle errors gracefully and give some kind of
feedback to the programmer so we need a method for doing that. And finally if we
have these two things we need an actual implementation of them in order to
actually implement context-free grammars. One last comment before we wrap up this
video. The form of the context-free grammar can be important. Tools are often
sensitive to the particular you write the grammar and while there are many ways to
write a grammar for the same language, only some of them may be accepted by the
tools. And as we'll see there are cases where it's necessary to modify the grammar
in order to get the tools to accept it. This happens actually sometimes as well
with regular expressions but it's much less common. So normally for most regular
expressions you would want to write the tools would be able to digest them. That's
fine. That's not also true. That's not true of an arbitrary context-free grammar.