So to summarize our discussion of Recursive Descent Parsing, it's a simple in general
parsing strategy. You can parse any Context-Free Grammar using Recursive Descent,
so it's very general in that respect. It cannot work with Left-Recursive
Grammar so you must eliminate The Left Recursion. Now in principle,
this can be automatically. You can have Algorithms that will eliminate the
Left Recursion. In practice, people eliminate the Left Recursion by hand and the
reason for that is that you need to know what the grammar is that you're using
so that you can write the semantic actions. And we haven't talked about semantic
actions yet but we will see them shortly. And because you wanted to know exactly
what grammar, form of grammar it has, people generally do the elimination of
left-recursion on their own. But that's not difficult to do. And in fact, recursion
descent is a popular strategy in practice. There are a lot to be more complicated,
but actually compilers in fact with complicated grammars use recursive
descent because it is so general. So, for example GCC is front-end
is a handwritten Recursive Descent Parser.