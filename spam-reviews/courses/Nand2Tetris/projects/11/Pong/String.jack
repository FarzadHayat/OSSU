// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array strArray;
    field int strLen, arrayLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0){
            let maxLength = 1;
        }
        let strArray = Array.new(maxLength);
        let strLen = 0;
        let arrayLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do strArray.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return strLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return strArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let strArray[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (strLen < arrayLen) {
            let strArray[strLen] = c;
            let strLen = strLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (strLen > 0) {
            let strLen = strLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
        var int value, i;
        var boolean negative;
        let value = 0;
        let negative = false;
        let i = 0;

        if ((arrayLen > 0) & (charAt(0) = 45)) { // 45 is "-" (negative symbol)
            let negative = true;
            let i = 1; // if string starts with "-", loop must start at strArray[1]
        }
        // ASCII for 0,1,...,9 are 48,49,...,57
        while ((i < strLen) & ((strArray[i] > 47) & (strArray[i] < 58))) {
            let value = (value * 10) + (strArray[i] - 48);
            let i = i + 1;
        }
        if (negative) {return -value;}
        else {return value;}
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        let strLen = 0;    // Clear string
        if (val < 0) {
            let val = -val;
            do appendChar(45);      // 45 is the ASCII code for the leading '-'
        }
        do doSetInt(val);
        return;
    }

    method void doSetInt(int val) {
        var int quotient, remainder;
        let quotient = val / 10;
        let remainder = val - (quotient * 10);

        if (val < 10) { // val was only a 1 digit decimal number
            do appendChar(remainder + 48); // 48 is the ASCII for 0
        }
        else {
            do doSetInt(quotient); // call setInt on val with last digit dropped
            do appendChar(remainder + 48); // append char for last digit
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
